generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                     String                 @id @default(cuid())
  name                   String?
  email                  String                 @unique
  emailVerified          DateTime?
  image                  String?
  password               String?
  role                   UserRole               @default(USER)
  customLogoUrl          String?                // エンタープライズプラン用のカスタムロゴ
  // 招待制関連フィールド
  invitedBy              String?                // 招待者のユーザーID
  invitationCode         String?                // 招待コード
  maxInvitations         Int                    @default(3) // 招待可能人数
  usedInvitations        Int                    @default(0) // 使用済み招待数
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
  accounts               Account[]
  announcementDeliveries AnnouncementDelivery[]
  createdDiscountLinks   DiscountLink[]         @relation("DiscountLinkCreator")
  questionTemplates      QuestionTemplate[]
  sessions               Session[]
  surveys                Survey[]
  invitedSurveys         SurveyUser[]           @relation("SurveyInviter")
  surveyUsers            SurveyUser[]
  usedDiscountLinks      DiscountLink[]         @relation("DiscountLinkUsers")
  dataUsage              DataUsage[]
  dataAddons             UserDataAddon[]
  notifications          Notification[]
  ticketPurchases        TicketPurchase[]
  tickets                UserTicket[]
  // 招待制関連リレーション
  inviter                User?                  @relation("UserInviter", fields: [invitedBy], references: [id])
  invitedUsers           User[]                 @relation("UserInviter")
  invitations            Invitation[]           @relation("InvitationCreator")
  receivedInvitation     Invitation?            @relation("InvitationReceiver")
  // お知らせ関連リレーション
  createdAnnouncements   Announcement[]         @relation("AnnouncementCreator")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Survey {
  id              String       @id @default(cuid())
  title           String
  description     String?
  status          SurveyStatus @default(DRAFT)
  shareUrl        String?      @unique
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  maxResponses    Int?
  endDate         DateTime?    // 回答募集の期限
  targetResponses Int?
  userId          String
  
  // アンケート単位のチケット設定
  ticketType      TicketType   @default(FREE)  // このアンケートのチケット
  ticketId        String?      // 使用したチケットのID
  paymentId       String?      // 決済ID
  surveyEndDate   DateTime?    // アンケート終了日（回答募集終了後）
  dataRetentionDays Int?       // データ保存期間（日数）
  
  // エンタープライズプラン用のカスタマイズ機能
  headerImageUrl  String?      // オリジナルヘッダー画像
  ogImageUrl      String?      // Open Graph用アイキャッチ画像
  useCustomLogo   Boolean?     // オリジナルロゴを使用するかどうか
  customDomain    String?      // カスタムドメイン
  
  questions       Question[]
  responses       Response[]
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  surveyUsers     SurveyUser[]
  ticketPurchases TicketPurchase[]
}

model SurveyUser {
  id         String           @id @default(cuid())
  userId     String
  surveyId   String
  permission SurveyPermission @default(VIEW)
  invitedBy  String
  invitedAt  DateTime         @default(now())
  acceptedAt DateTime?
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  inviter    User             @relation("SurveyInviter", fields: [invitedBy], references: [id], onDelete: Cascade)
  survey     Survey           @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, surveyId])
}

model Question {
  id          String       @id @default(cuid())
  title       String
  description String?
  type        QuestionType
  required    Boolean      @default(false)
  order       Int
  options     Json?
  settings    Json?
  conditions  Json?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  surveyId    String
  answers     Answer[]
  survey      Survey       @relation(fields: [surveyId], references: [id], onDelete: Cascade)
}

model Response {
  id        String   @id @default(cuid())
  surveyId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  answers   Answer[]
  survey    Survey   @relation(fields: [surveyId], references: [id], onDelete: Cascade)
}

model Answer {
  id         String       @id @default(cuid())
  questionId String
  responseId String
  value      String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  question   Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  response   Response     @relation(fields: [responseId], references: [id], onDelete: Cascade)
  files      FileUpload[]

  @@unique([questionId, responseId])
}

model FileUpload {
  id           String   @id @default(cuid())
  answerId     String
  filename     String
  originalName String
  mimeType     String
  size         Int
  url          String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  answer       Answer   @relation(fields: [answerId], references: [id], onDelete: Cascade)
}

model QuestionTemplate {
  id          String       @id @default(cuid())
  title       String
  description String?
  type        QuestionType
  required    Boolean      @default(false)
  options     Json?
  settings    Json?
  conditions  Json?
  isPublic    Boolean      @default(false)
  usageCount  Int          @default(0)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model DiscountLink {
  id                         String       @id @default(cuid())
  code                       String       @unique
  name                       String
  description                String?
  discountType               DiscountType @default(PERCENTAGE)
  discountValue              Float
  targetTicketType           TicketType
  originalPrice              Float
  discountedPrice            Float
  maxUses                    Int?
  currentUses                Int          @default(0)
  isActive                   Boolean      @default(true)
  validFrom                  DateTime
  validUntil                 DateTime
  subscriptionDiscountMonths Int?
  totalSavings               Float?
  createdBy                  String
  createdAt                  DateTime     @default(now())
  updatedAt                  DateTime     @updatedAt
  creator                    User         @relation("DiscountLinkCreator", fields: [createdBy], references: [id])
  users                      User[]       @relation("DiscountLinkUsers")
}

model PlanConfig {
  id              String   @id @default(cuid())
  planType        String   @unique
  name            String
  description     String?
  price           Float
  features        Json
  limits          Json
  isActive        Boolean  @default(true)
  sortOrder       Int      @default(0)
  stripeProductId String?
  stripePriceId   String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Announcement {
  id          String                 @id @default(cuid())
  title       String
  content     String
  type        AnnouncementType       @default(MANUAL)
  status      AnnouncementStatus     @default(DRAFT)
  priority    Int                    @default(0)
  scheduledAt DateTime?
  conditions  Json?
  targetPlans Json?
  targetUsers Json?
  totalSent   Int                    @default(0)
  totalRead   Int                    @default(0)
  createdBy   String                 // 配信者（管理者）のユーザーID
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  deliveries  AnnouncementDelivery[]
  creator     User                   @relation("AnnouncementCreator", fields: [createdBy], references: [id])
}

model AnnouncementDelivery {
  id             String         @id @default(cuid())
  announcementId String
  userId         String
  status         DeliveryStatus @default(PENDING)
  readAt         DateTime?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  announcement   Announcement   @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([announcementId, userId])
}

model DataUsage {
  id          String   @id @default(cuid())
  userId      String
  surveyId   String?
  dataType    String   // 'survey_data', 'file_upload', 'export_data'
  sizeBytes   Int      // データサイズ（バイト）
  description String?  // データの説明
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DataStorageAddon {
  id                String   @id @default(cuid())
  name              String   // 例: "100MB容量追加"
  description       String?  // 説明
  type              String   // 'storage' または 'retention'
  amount            Int      // 容量の場合: MB数、保存期間の場合: 日数
  price             Int      // 価格（円）
  stripeProductId   String?  // Stripe商品ID
  stripePriceId     String?  // Stripe価格ID
  isActive          Boolean  @default(true)
  isMonthly         Boolean  @default(false) // 月額かどうか（保存期間延長は買い切り）
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  userPurchases     UserDataAddon[]
}

model UserDataAddon {
  id                String           @id @default(cuid())
  userId            String
  addonId           String
  status            AddonStatus      @default(ACTIVE)
  purchasedAt       DateTime         @default(now())
  expiresAt         DateTime?        // 月額の場合のみ設定
  stripeSubscriptionId String?       // 月額の場合のStripeサブスクリプションID
  stripePaymentIntentId String?      // 買い切りの場合のStripe支払いID
  surveyId          String?          // 保存期間延長の場合の対象アンケートID
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  addon             DataStorageAddon @relation(fields: [addonId], references: [id], onDelete: Cascade)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@unique([userId, addonId, status])
}

enum AddonStatus {
  ACTIVE
  EXPIRED
  CANCELLED
}

enum UserRole {
  USER
  ADMIN
}

enum SurveyStatus {
  DRAFT
  ACTIVE
  CLOSED
}

enum SurveyPermission {
  EDIT
  VIEW
  ADMIN
}

enum QuestionType {
  TEXT
  TEXTAREA
  NUMBER
  EMAIL
  PHONE
  DATE
  RADIO
  CHECKBOX
  SELECT
  RATING
  PREFECTURE
  NAME
  AGE_GROUP
  LOCATION
  FILE_UPLOAD
  SECTION
  PAGE_BREAK
}

enum TicketType {
  FREE
  STANDARD
  PROFESSIONAL
  ENTERPRISE
  ONETIME_UNLIMITED
}


enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum AnnouncementType {
  MANUAL
  SCHEDULED
  CONDITIONAL
}

enum AnnouncementStatus {
  DRAFT
  SCHEDULED
  SENDING
  SENT
  PAUSED
}

enum DeliveryStatus {
  PENDING
  SENT
  READ
  HIDDEN
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  data      String?  // JSON string for additional data
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum NotificationType {
  SURVEY_RESPONSE
  ADDON_PURCHASED
  PLAN_UPDATED
  SYSTEM_ANNOUNCEMENT
}

enum PurchaseStatus {
  ACTIVE
  CANCELLED
  REFUNDED
}

// チケット購入記録（アンケート単位の買い切りチケットの記録）
model TicketPurchase {
  id                 String    @id @default(cuid())
  userId             String
  surveyId           String?
  ticketType         TicketType
  amount             Int?      // 金額（最小単位, JPYなら円）
  currency           String?   // 例: 'jpy'
  checkoutSessionId  String?   @unique
  paymentIntentId    String?   @unique
  metadata           Json?
  status             PurchaseStatus @default(ACTIVE)
  purchasedAt        DateTime  @default(now())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  survey             Survey?   @relation(fields: [surveyId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([surveyId])
}

// チケット管理（ユーザーが持つチケットの数）
model UserTicket {
  id        String     @id @default(cuid())
  userId    String
  ticketType TicketType
  totalTickets Int      // 購入した総チケット数
  usedTickets  Int      @default(0) // 使用済みチケット数
  remainingTickets Int  // 残りチケット数（計算フィールド）
  purchasedAt DateTime @default(now())
  expiresAt  DateTime? // チケットの有効期限（null = 永続）
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([ticketType])
}

// 招待制システム
model Invitation {
  id                String       @id @default(cuid())
  code              String       @unique // 招待コード
  inviterId         String       // 招待者のユーザーID
  inviterEmail      String       // 招待者のメールアドレス
  inviterName       String?      // 招待者の名前
  invitedEmail      String?      // 招待されたメールアドレス（任意）
  invitedName       String?      // 招待された人の名前（任意）
  message           String?      // 招待メッセージ
  isUsed            Boolean      @default(false) // 使用済みかどうか
  usedAt            DateTime?    // 使用日時
  usedByUserId      String?      @unique // 使用したユーザーID
  expiresAt         DateTime?    // 有効期限（null = 永続）
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  
  // リレーション
  inviter           User         @relation("InvitationCreator", fields: [inviterId], references: [id], onDelete: Cascade)
  usedByUser        User?        @relation("InvitationReceiver", fields: [usedByUserId], references: [id], onDelete: SetNull)
  
  @@index([inviterId])
  @@index([code])
  @@index([isUsed])
}

