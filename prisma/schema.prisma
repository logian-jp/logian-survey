generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                     String                 @id @default(cuid())
  name                   String?
  email                  String                 @unique
  emailVerified          DateTime?
  image                  String?
  password               String?
  role                   UserRole               @default(USER)
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
  accounts               Account[]
  announcementDeliveries AnnouncementDelivery[]
  createdDiscountLinks   DiscountLink[]         @relation("DiscountLinkCreator")
  questionTemplates      QuestionTemplate[]
  sessions               Session[]
  surveys                Survey[]
  invitedSurveys         SurveyUser[]           @relation("SurveyInviter")
  surveyUsers            SurveyUser[]
  userPlan               UserPlan?
  usedDiscountLinks      DiscountLink[]         @relation("DiscountLinkUsers")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Survey {
  id              String       @id @default(cuid())
  title           String
  description     String?
  status          SurveyStatus @default(DRAFT)
  shareUrl        String?      @unique
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  maxResponses    Int?
  endDate         DateTime?
  targetResponses Int?
  userId          String
  questions       Question[]
  responses       Response[]
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  surveyUsers     SurveyUser[]
}

model SurveyUser {
  id         String           @id @default(cuid())
  userId     String
  surveyId   String
  permission SurveyPermission @default(VIEW)
  invitedBy  String
  invitedAt  DateTime         @default(now())
  acceptedAt DateTime?
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  inviter    User             @relation("SurveyInviter", fields: [invitedBy], references: [id], onDelete: Cascade)
  survey     Survey           @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, surveyId])
}

model Question {
  id          String       @id @default(cuid())
  title       String
  description String?
  type        QuestionType
  required    Boolean      @default(false)
  order       Int
  options     Json?
  settings    Json?
  conditions  Json?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  surveyId    String
  answers     Answer[]
  survey      Survey       @relation(fields: [surveyId], references: [id], onDelete: Cascade)
}

model Response {
  id        String   @id @default(cuid())
  surveyId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  answers   Answer[]
  survey    Survey   @relation(fields: [surveyId], references: [id], onDelete: Cascade)
}

model Answer {
  id         String       @id @default(cuid())
  questionId String
  responseId String
  value      String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  question   Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  response   Response     @relation(fields: [responseId], references: [id], onDelete: Cascade)
  files      FileUpload[]

  @@unique([questionId, responseId])
}

model FileUpload {
  id           String   @id @default(cuid())
  answerId     String
  filename     String
  originalName String
  mimeType     String
  size         Int
  url          String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  answer       Answer   @relation(fields: [answerId], references: [id], onDelete: Cascade)
}

model QuestionTemplate {
  id          String       @id @default(cuid())
  title       String
  description String?
  type        QuestionType
  required    Boolean      @default(false)
  options     Json?
  settings    Json?
  conditions  Json?
  isPublic    Boolean      @default(false)
  usageCount  Int          @default(0)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserPlan {
  id        String     @id @default(cuid())
  userId    String     @unique
  planType  PlanType   @default(FREE)
  status    PlanStatus @default(ACTIVE)
  startDate DateTime   @default(now())
  endDate   DateTime?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DiscountLink {
  id                         String       @id @default(cuid())
  code                       String       @unique
  name                       String
  description                String?
  discountType               DiscountType @default(PERCENTAGE)
  discountValue              Float
  targetPlanType             PlanType
  originalPrice              Float
  discountedPrice            Float
  maxUses                    Int?
  currentUses                Int          @default(0)
  isActive                   Boolean      @default(true)
  validFrom                  DateTime
  validUntil                 DateTime
  subscriptionDiscountMonths Int?
  totalSavings               Float?
  createdBy                  String
  createdAt                  DateTime     @default(now())
  updatedAt                  DateTime     @updatedAt
  creator                    User         @relation("DiscountLinkCreator", fields: [createdBy], references: [id])
  users                      User[]       @relation("DiscountLinkUsers")
}

model PlanConfig {
  id          String   @id @default(cuid())
  planType    String   @unique
  name        String
  description String?
  price       Float
  features    Json
  limits      Json
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Announcement {
  id          String                 @id @default(cuid())
  title       String
  content     String
  type        AnnouncementType       @default(MANUAL)
  status      AnnouncementStatus     @default(DRAFT)
  priority    Int                    @default(0)
  scheduledAt DateTime?
  conditions  Json?
  targetPlans Json?
  targetUsers Json?
  totalSent   Int                    @default(0)
  totalRead   Int                    @default(0)
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  deliveries  AnnouncementDelivery[]
}

model AnnouncementDelivery {
  id             String         @id @default(cuid())
  announcementId String
  userId         String
  status         DeliveryStatus @default(PENDING)
  readAt         DateTime?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  announcement   Announcement   @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([announcementId, userId])
}

enum UserRole {
  USER
  ADMIN
}

enum SurveyStatus {
  DRAFT
  ACTIVE
  CLOSED
}

enum SurveyPermission {
  EDIT
  VIEW
  ADMIN
}

enum QuestionType {
  TEXT
  TEXTAREA
  NUMBER
  EMAIL
  PHONE
  DATE
  RADIO
  CHECKBOX
  SELECT
  RATING
  PREFECTURE
  NAME
  AGE_GROUP
  LOCATION
  FILE_UPLOAD
  SECTION
  PAGE_BREAK
}

enum PlanType {
  FREE
  STANDARD
  PROFESSIONAL
  ENTERPRISE
  ONETIME_UNLIMITED
}

enum PlanStatus {
  ACTIVE
  CANCELLED
  EXPIRED
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum AnnouncementType {
  MANUAL
  SCHEDULED
  CONDITIONAL
}

enum AnnouncementStatus {
  DRAFT
  SCHEDULED
  SENDING
  SENT
  PAUSED
}

enum DeliveryStatus {
  PENDING
  SENT
  READ
  HIDDEN
}
