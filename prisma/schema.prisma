// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts         Account[]
  sessions         Session[]
  surveys          Survey[]
  surveyUsers      SurveyUser[]
  invitedSurveys   SurveyUser[] @relation("SurveyInviter")
  questionTemplates QuestionTemplate[]
  userPlan         UserPlan?
  createdDiscountLinks DiscountLink[] @relation("DiscountLinkCreator")
  usedDiscountLinks    DiscountLink[] @relation("DiscountLinkUsers")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  USER
  ADMIN
}

model Survey {
  id          String      @id @default(cuid())
  title       String
  description String?
  status      SurveyStatus @default(DRAFT)
  shareUrl    String?     @unique
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // 回答設定
  maxResponses    Int?      // 回答数上限（null = 制限なし）
  endDate         DateTime? // 回答終了日時（null = 制限なし）
  targetResponses Int?      // 回答数目標値（null = 目標なし）

  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  questions   Question[]
  responses   Response[]
  surveyUsers SurveyUser[]
}

enum SurveyStatus {
  DRAFT
  ACTIVE
  CLOSED
}

enum SurveyPermission {
  EDIT
  VIEW
  ADMIN
}

model SurveyUser {
  id           String           @id @default(cuid())
  userId       String
  surveyId     String
  permission   SurveyPermission @default(VIEW)
  invitedBy    String
  invitedAt    DateTime         @default(now())
  acceptedAt   DateTime?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  survey   Survey @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  inviter  User   @relation("SurveyInviter", fields: [invitedBy], references: [id], onDelete: Cascade)

  @@unique([userId, surveyId])
}

model Question {
  id          String       @id @default(cuid())
  title       String
  description String?
  type        QuestionType
  required    Boolean      @default(false)
  order       Int
  options     Json?        // For multiple choice, checkbox, etc.
  settings    Json?        // For additional settings like ordinal structure
  conditions  Json?        // For conditional logic
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  surveyId  String
  survey    Survey     @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  answers   Answer[]
}

enum QuestionType {
  TEXT
  TEXTAREA
  NUMBER
  EMAIL
  PHONE
  DATE
  RADIO
  CHECKBOX
  SELECT
  RATING
  PREFECTURE
  NAME
  AGE_GROUP
  LOCATION
  FILE_UPLOAD
  SECTION
  PAGE_BREAK
}

model Response {
  id        String   @id @default(cuid())
  surveyId  String
  survey    Survey   @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  answers   Answer[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Answer {
  id         String @id @default(cuid())
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  responseId String
  response   Response @relation(fields: [responseId], references: [id], onDelete: Cascade)
  value      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // ファイルアップロード用
  files      FileUpload[]

  @@unique([questionId, responseId])
}

model FileUpload {
  id        String   @id @default(cuid())
  answerId  String
  answer    Answer   @relation(fields: [answerId], references: [id], onDelete: Cascade)
  filename  String
  originalName String
  mimeType  String
  size      Int
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model QuestionTemplate {
  id          String       @id @default(cuid())
  title       String
  description String?
  type        QuestionType
  required    Boolean      @default(false)
  options     Json?        // For multiple choice, checkbox, etc.
  settings    Json?        // For additional settings like ordinal structure
  conditions  Json?        // For conditional logic
  isPublic    Boolean      @default(false) // 公開テンプレートかどうか
  usageCount  Int          @default(0)     // 使用回数
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserPlan {
  id        String     @id @default(cuid())
  userId    String     @unique
  planType  PlanType   @default(FREE)
  status    PlanStatus @default(ACTIVE)
  startDate DateTime   @default(now())
  endDate   DateTime?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum PlanType {
  FREE
  STANDARD
  PROFESSIONAL
  ENTERPRISE
  ONETIME_UNLIMITED
}

enum PlanStatus {
  ACTIVE
  CANCELLED
  EXPIRED
}

model DiscountLink {
  id          String   @id @default(cuid())
  code        String   @unique // 割引リンクのコード
  name        String   // 割引リンクの名前
  description String?  // 説明
  
  // 割引設定
  discountType     DiscountType @default(PERCENTAGE) // PERCENTAGE or FIXED_AMOUNT
  discountValue    Float        // 割引率(%) または 固定金額
  targetPlanType   PlanType      // 対象プラン
  originalPrice    Float        // 元の価格
  discountedPrice  Float        // 割引後価格
  
  // 制限設定
  maxUses          Int?         // 最大利用回数 (null = 無制限)
  currentUses      Int          @default(0) // 現在の利用回数
  isActive         Boolean      @default(true) // 有効/無効
  
  // 期間設定
  validFrom        DateTime     // 有効開始日時
  validUntil       DateTime     // 有効終了日時
  
  // サブスクリプション割引設定
  subscriptionDiscountMonths Int?     // 割引適用期間（月数）
  totalSavings              Float?   // 合計節約額
  
  // 作成者
  createdBy        String       // 作成者ID
  creator          User         @relation("DiscountLinkCreator", fields: [createdBy], references: [id])
  
  // 利用者
  users            User[]       @relation("DiscountLinkUsers")
  
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

enum DiscountType {
  PERCENTAGE     // パーセンテージ割引
  FIXED_AMOUNT   // 固定金額割引
}

model PlanConfig {
  id          String   @id @default(cuid())
  planType    String   @unique // プランタイプ（FREE, STANDARD, etc.）
  name        String   // プラン名
  description String?  // プラン説明
  price       Float    // 価格（円）
  features    Json     // 機能リスト
  limits      Json     // 制限設定
  isActive    Boolean  @default(true) // 有効/無効
  sortOrder   Int      @default(0) // 表示順序
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
